<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zeni7h]]></title>
  <link href="http://code4mind.github.io/atom.xml" rel="self"/>
  <link href="http://code4mind.github.io/"/>
  <updated>2014-03-02T07:08:31-08:00</updated>
  <id>http://code4mind.github.io/</id>
  <author>
    <name><![CDATA[eric]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[libvirt 实践日记]]></title>
    <link href="http://code4mind.github.io/blog/2014/03/02/libvirt-action-diary-001/"/>
    <updated>2014-03-02T06:09:00-08:00</updated>
    <id>http://code4mind.github.io/blog/2014/03/02/libvirt-action-diary-001</id>
    <content type="html"><![CDATA[<h2>libvirt 实践日记</h2>

<h4>前言</h4>

<p>很久很久没有写过博客，因为从本科毕业开始就几乎没闲着，每次有点时间想写点什么的时候，
也总是突然发觉不知道从何写起。最近看了<a href="http://mindhacks.cn/">刘未鹏博客</a>中的一篇文章《为什么你应该（从现在开始就）写博客》，觉得有些东西还是要写出来。</p>

<h4>libvrit是什么</h4>

<p>在libvirt官网上找到这几句话，我想足以表达libvirt是用来做什么的<br/>
A toolkit to interact with the virtualization capabilities of recent versions of Linux (and other OSes),the goal of libvirt: <strong>to provide a common and stable layer sufficient to securely manage domains on a node, possibly remote.</strong></p>

<!--more-->


<h4>日记-001</h4>

<p>我最近的工作是要对运行在host上的domain进行动态的迁移，以缓解某个host过载的情况，当前版本的工作是设计并开发出一个人工执行负载均衡的模块。
花了一天时间看了看libvirt的介绍和文档，稍微了解了一下实验室项目的结构，就开始着手这个模块的设计了。最初我以为libvirt这么高级的东东，只要调用个函数就可以了。其实不然啊，还是我太天真。直接调用函数有90%的可能是运行报错，就算你运气好误打误撞的跑起来了，估计迁移完你虚拟机也跪了。那么，在什么样的情况下，才能迁移呢？<br/>
按照官网的说法，跟这次迁移有关的两个host必须有相同的硬件架构，不然是不行的，这个条件隐藏在libvirt在线文档的角落里</p>

<pre><code>There are many limitations on migration imposed by the underlying technology  
  - for example it may not be possible to migrate between different processors even with the same  
  architecture, or between different types of hypervisor.
</code></pre>

<p>顺便吐槽下官网的文档，写的太简洁了，而且也每个demo给看看，条件说的也不清楚，如果你认为仅仅满足上面条件就能迁移那就大错特错了，还有其他条件的。<br/>
假设我们已经有了两个硬件架构相同的hosts，现在通过libvirt提供的接口进行domain迁移。也就是调用virDomainMigrate函数来实现这个功能，virDomainMigrate的原型如下：</p>

<pre><code> virDomainPtr   virDomainMigrate    (virDomainPtr domain,
                 virConnectPtr dconn,
                 unsigned long flags,
                 const char * dname,
                 const char * uri,
                 unsigned long bandwidth)
</code></pre>

<p>传入的参数分别是：待迁移的domain,目标host的链接 dconn,迁移过程一些参数 flags，后面三个可选，可以填NULL，除非你有其他要求。<br/>
函数的返回值是一个指向新domain的指针。
主要介绍一下flags的选取，以及我在实验过程中遇到的蛋疼的问题。<br/>
flag的简单说明：<br/>
1. VIR_MIGRATE_LIVE:在线进行domain的迁移，不会在迁移过程中暂停镜像的运行。 <br/>
2. VIR_MIGRATE_UNSAFE：忽略当前对迁移操作的安全检测，至于安全、不安全的标准我还没有深入了解。<br/>
3. VIR_MIGRATE_PERSIST_DEST：当迁移成功后，domain永久驻留在新的host上。<br/>
4. VIR_MIGRATE_PEER2PEER：直接连接源host和目标host <br/>
5. VIR_MIGRATE_TUNNELLED：通过libvirt提供的rpc通道进行数据的传输，如果使用这个flag必须添加上一项。</p>

<p>实验过程中那些蛋疼的问题，及部分解决方案：</p>

<ol>
<li>error: Unsafe migration: Migration may lead to data corruption if disks use cache != none<br/>
使用API进行迁移时，需要在flags上添加 VIR_MIGRATE_UNSAFE</li>
<li>QEMU Driver error : internal error hostname on destination resolved to localhost, but migration requires an FQDN<br/>
ssh到目标host，运行hostname domain</li>
<li><p>libvirt: error : argument unsupported: offline migration is not supported by the source host<br/>
离线迁移有可能有些主机不支持，具体什么情况支持目前还没试验过。我只做了在线的测试，离线的是后续工作内容，等之后做了相关内容的研究在写吧。</p></li>
<li><p>libvirt: Storage Driver error : cannot open file &lsquo;/imgs/xxx.raw&rsquo;: No such file or directory<br/>
检查src和dst主机是否路径健全，是否都存有镜像文件</p></li>
<li><p>迁移到另外一台host后，系统崩溃，无法找到boot文件<br/>
检查双方主机是否存在相同的镜像，如果不存在要及时的把镜像分发到主机上。这个问题其实很重要，不仅要事先分发，还要及时更新和适时清理。否则会有些意想不到的问题出现。</p></li>
<li><p>libvirt: QEMU Driver error : internal error Process exited while reading console log output: char device redirected to /dev/pts/3
((null):28735): Spice-Warning **: reds.c:3065:reds_init_socket: reds_init_socket: binding socket to xxx.xxx.xxx.xxx:port failed
failed to initialize spice server<br/>
其实这是spice协议的错误，并不是libvirt的问题，主要是由于设置了Graphics address,因此在迁移之后，无法重新连接配置文件中指定的图形地址，所以会有错。可改为127.0.0.1。这种设置方法只能在domain所在host的机器上访问镜像的图形界面，如果要想远程访问需要调用另外一个函数。</p></li>
</ol>


<p>以上大概是我最近一两周实验室工作的总结，如果这个项目还会做下去的话，我也会继续更新关于libvirt的学习过程。希望我遇到的问题以及解决方案能够帮到其他人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统重启后开启Oracle 11g、Hadoop、Hive相关服务]]></title>
    <link href="http://code4mind.github.io/blog/2013/05/07/restart-service/"/>
    <updated>2013-05-07T21:15:00-07:00</updated>
    <id>http://code4mind.github.io/blog/2013/05/07/restart-service</id>
    <content type="html"><![CDATA[<h5>大四快毕业了，寒假回来就一直做毕设，烂尾了好多文章在电脑上，之后慢慢填坑。今天先把我做毕设时遇到的一个问题记录一下。</h5>

<p>我的毕业设计是跟分布式计算相关的，所以就用到了Hadoop,做的过程实在是蛋疼无比，没有参考，没有指导，大部分资料只能查官方文档或者去google。<br/>
OK，进入正题，这个项目是基于CentOS系统的分布式架构，采用的Hadoop，还用到Hadoop下子项目里面的Sqoop,Hive，详细的介绍有机会再另一篇文章中写一下，这里讲下我当时在系统重启后遇到的无法正常运行程序的问题。<br/>
大家都知道，一般这种系统都是运行在服务器上的，而服务器大多情况下不会轻易重启，但是我是用笔记本开发，不可能不关机，所以重启后会就比较蛋疼，要重新开启所有服务才能正常跑程序，不然会出现各种奇葩的错误。</p>

<!--more-->


<h2>1.Oracle 11g</h2>

<h5>(1)切换Oracle数据库用户</h5>

<p>在terminal中输入</p>

<pre><code>`su oracle  
password`  
</code></pre>

<h5>(2)开启Oracle数据库</h5>

<p>在terminal中输入</p>

<pre><code>`sqlplus /as sysdba  
startup`  
</code></pre>

<h5>(3)开启Oracle的监听</h5>

<p>在terminal中输入</p>

<pre><code>`lsnrctl  
 start`  
</code></pre>

<p>看到terminal中的回显，正常的话会显示oracle相关参数，然后就可以通过SQL Explorer等工具操作数据库了</p>

<h2>2.Hadoop</h2>

<p>使用Hadoop必须要开SSH，不然不能Map-reduce</p>

<h5>(1)开启ssh服务</h5>

<p>在terminal中输入<br/>
<code>service sshd start</code></p>

<h5>(2)启动Hadoop服务</h5>

<p>*如果没有在/etc/profile中配置Hadoop的环境变量，那么要先进入Hadoop的安装路径
<code>cd /usr/local/hadoop/bin</code><br/>
然后启动Hadoop<br/>
<code>./start-all.sh</code>
正常启动的话,在terminal中会回显信息，不放心的话可以利用另外一个工具，在terminal中输入
<code>/usr/java/jdk1.7.0_15/bin/jps</code><br/>
回显如果出现namenode,datanode,jobtracker,tasktracker那么说明启动成功了。</p>

<h2>3.Hive</h2>

<h5>(1)开启Hive server</h5>

<p>如果不启动Hive server的话，当你用JDBC连接Hive的时候就会出现cant&rsquo;t establish connection，所以一定要启动Hive server<br/>
*如果没配置Hive的环境变量，那就进入Hive的安装路径
<code>cd /usr/local/hive/bin  
 ./hive --service hive-server</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用rpmbuild构造离线RPM包]]></title>
    <link href="http://code4mind.github.io/blog/2013/05/05/newone/"/>
    <updated>2013-05-05T16:55:00-07:00</updated>
    <id>http://code4mind.github.io/blog/2013/05/05/newone</id>
    <content type="html"><![CDATA[<h3>构造RPM包步骤</h3>

<p>1.配置打包环境<br/>
2.获取源代码<br/>
3.编写SPEC文件<br/>
4.使用rpmbuild打包</p>

<!--more-->


<h4>1.配置打包环境</h4>

<p>（1）构造rpm包首先需要安装rpmbuild,gcc工具。</p>

<p>（2）在Fedora等系统中，并不会直接生成构造rpm所需的目录。因此，需要手动创建。以Fedora为例，执行：<br/>
<code>sudo -i  
mkdir -P /rpmbuild/{S{OURCE,PEC,RPM}S,BUILD,RPMS}</code></p>

<h4>2.获取源代码</h4>

<p>（1）要制作rpm包需要先将源码压缩为tar.gz格式，假设源文件存放的目录为test-1，则执行以下命令：<br/>
<code>tar -cf test-1.tar test-1  
gzip -9 test-1.tar</code></p>

<p>结果如下图所示：<br/>
<img src="http://farm9.staticflickr.com/8134/8709576269_8f5a15120e.jpg" alt="unzip" /><br/>
（2）将源文件压缩包放入rpmbuild/SOURCES/ 目录中。</p>

<h4>3.编写SPEC文件</h4>

<p>spec文件是构造rpm包的核心，包含所有rpm包的关键信息，因此编写spec文件是最为重要的环节。<br/>
测试过程中使用的spec文件较为简单，算是一个基本的spec文件模版,如下：  <img src="http://farm9.staticflickr.com/8407/8709578559_743089ed1b.jpg" alt="SPEC" /><br/>
将编写好的spec文件放入 rpmbuild/SPECS/ 目录中。</p>

<h4>4.使用rpmbuild打包</h4>

<p>假设我们编写的spec文件名为test.spec,执行以下命令进行制作二进制包：<br/>
<code>rpmbuild -bb test.spec</code><br/>
如果之前的步骤正确无误，则会自动进行打包，如下图：<br/>
<img src="http://farm9.staticflickr.com/8415/8710720266_21d98489dc.jpg" alt="build-step1" /><br/>
<img src="http://farm9.staticflickr.com/8256/8710711360_610dc4230a.jpg" title="" alt="build-step2" /><br/>
如图所示，我们制作出了自己的rpm包，rpm包生成在 rpmbuild/RPMS/i386 目录下(i386是系统的架构类型)。
<img src="http://farm9.staticflickr.com/8257/8709577941_7c9ab42a3f.jpg" alt="rpm" /><br/>
使用yum工具安装并检测制作的rpm包<br/>
首先使用yum工具安装一下我们制作的rpm包，检测是否能够成功安装。<br/>
<code>yum install test-1-1.i386.rpm</code><br/>
执行过程如下图所示：<br/>
<img src="http://farm9.staticflickr.com/8408/8709614221_372bd07a29.jpg" alt="install-step1" /><br/>
输入y,继续<br/>
<img src="http://farm9.staticflickr.com/8552/8710705248_59b3e6f7cb.jpg" alt="install-step2" /><br/>
安装成功，确认一下是否在已安装列表中，可以使用下列命令：<br/>
<code>yum list "test-1-1.i386</code><br/>
结果如下图：<br/>
<img src="http://farm9.staticflickr.com/8138/8710703614_beec910308.jpg" alt="check" /><br/>
可以看到，我们的rpm包已经成功的安装在系统中了。</p>

<h3>整个构造RPM包的流程到此结束，我们可以使用自己构造的RPM包在相同的系统中使用了。</h3>
]]></content>
  </entry>
  
</feed>
